'use client'

import * as React from 'react'\nimport { useTheme } from '@/lib/hooks/use-theme'\nimport { useConfiguration } from '@/lib/config/use-configuration'\n\n/**\n * Theme Integration Layer\n * \n * Provides seamless integration between the theme system and components,\n * ensuring consistent theme application across all components.\n */\n\ninterface ThemeIntegrationContextValue {\n  currentTheme: string\n  currentMode: 'light' | 'dark'\n  isTransitioning: boolean\n  applyTheme: (element: HTMLElement) => void\n  removeTheme: (element: HTMLElement) => void\n  getThemeClasses: () => string[]\n  getThemeVariables: () => Record<string, string>\n}\n\nconst ThemeIntegrationContext = React.createContext<ThemeIntegrationContextValue | undefined>(undefined)\n\n/**\n * Theme Integration Provider\n * \n * Manages theme application and provides utilities for components to integrate with the theme system.\n */\nexport function ThemeIntegrationProvider({ children }: { children: React.ReactNode }) {\n  const { theme, themeId, mode, isTransitioning } = useTheme()\n  const { config } = useConfiguration()\n\n  const applyTheme = React.useCallback((element: HTMLElement) => {\n    // Apply theme classes\n    const themeClasses = getThemeClasses()\n    element.classList.add(...themeClasses)\n    \n    // Apply theme variables\n    const themeVariables = getThemeVariables()\n    Object.entries(themeVariables).forEach(([key, value]) => {\n      element.style.setProperty(key, value)\n    })\n  }, [theme, themeId, mode])\n\n  const removeTheme = React.useCallback((element: HTMLElement) => {\n    // Remove theme classes\n    const allThemeClasses = [\n      'light', 'dark',\n      'default-theme', 'cyberpunk-theme', 'brutalism-theme', 'minimal-theme', 'glassmorphism-theme',\n      'theme-glitch', 'theme-neon', 'theme-scanlines', 'theme-noise'\n    ]\n    element.classList.remove(...allThemeClasses)\n    \n    // Remove theme variables\n    const themeVariables = getThemeVariables()\n    Object.keys(themeVariables).forEach(key => {\n      element.style.removeProperty(key)\n    })\n  }, [])\n\n  const getThemeClasses = React.useCallback(() => {\n    const classes = [mode, `${themeId}-theme`]\n    \n    if (theme.custom?.glitch) classes.push('theme-glitch')\n    if (theme.custom?.neon) classes.push('theme-neon')\n    if (theme.custom?.scanlines) classes.push('theme-scanlines')\n    if (theme.custom?.noise) classes.push('theme-noise')\n    \n    if (isTransitioning) classes.push('theme-transitioning')\n    \n    return classes\n  }, [theme, themeId, mode, isTransitioning])\n\n  const getThemeVariables = React.useCallback(() => {\n    const colors = theme.colors[mode]\n    const variables: Record<string, string> = {}\n    \n    // Color variables\n    Object.entries(colors).forEach(([key, value]) => {\n      const cssKey = key.replace(/([A-Z])/g, '-$1').toLowerCase()\n      variables[`--${cssKey}`] = value\n    })\n    \n    // Typography variables\n    variables['--font-sans'] = theme.typography.fontFamily.sans.join(', ')\n    variables['--font-mono'] = theme.typography.fontFamily.mono.join(', ')\n    variables['--font-heading'] = theme.typography.fontFamily.heading.join(', ')\n    \n    // Spacing variables\n    Object.entries(theme.spacing.borderRadius).forEach(([key, value]) => {\n      variables[`--radius-${key}`] = value\n    })\n    \n    // Effect variables\n    Object.entries(theme.effects.shadows).forEach(([key, value]) => {\n      variables[`--shadow-${key}`] = value\n    })\n    \n    return variables\n  }, [theme, mode])\n\n  const value = React.useMemo(() => ({\n    currentTheme: themeId,\n    currentMode: mode,\n    isTransitioning,\n    applyTheme,\n    removeTheme,\n    getThemeClasses,\n    getThemeVariables\n  }), [themeId, mode, isTransitioning, applyTheme, removeTheme, getThemeClasses, getThemeVariables])\n\n  return (\n    <ThemeIntegrationContext.Provider value={value}>\n      {children}\n    </ThemeIntegrationContext.Provider>\n  )\n}\n\n/**\n * Hook to access theme integration utilities\n */\nexport function useThemeIntegration() {\n  const context = React.useContext(ThemeIntegrationContext)\n  if (!context) {\n    throw new Error('useThemeIntegration must be used within a ThemeIntegrationProvider')\n  }\n  return context\n}\n\n/**\n * Hook for components to automatically apply theme styling\n */\nexport function useThemeAware(ref?: React.RefObject<HTMLElement>) {\n  const { applyTheme, removeTheme, getThemeClasses, getThemeVariables } = useThemeIntegration()\n  const elementRef = React.useRef<HTMLElement>(null)\n  const targetRef = ref || elementRef\n\n  React.useEffect(() => {\n    const element = targetRef.current\n    if (!element) return\n\n    applyTheme(element)\n\n    return () => {\n      removeTheme(element)\n    }\n  }, [applyTheme, removeTheme, targetRef])\n\n  return {\n    ref: targetRef,\n    themeClasses: getThemeClasses(),\n    themeVariables: getThemeVariables()\n  }\n}\n\n/**\n * Hook for getting theme-aware CSS classes\n */\nexport function useThemeClasses(baseClasses: string[] = []): string {\n  const { getThemeClasses } = useThemeIntegration()\n  const themeClasses = getThemeClasses()\n  \n  return React.useMemo(() => {\n    return [...baseClasses, ...themeClasses].join(' ')\n  }, [baseClasses, themeClasses])\n}\n\n/**\n * HOC for making components theme-aware\n */\nexport function withThemeIntegration<P extends object>(\n  Component: React.ComponentType<P>\n): React.ComponentType<P> {\n  return React.forwardRef<any, P>((props, ref) => {\n    const { ref: themeRef, themeClasses } = useThemeAware()\n    \n    const combinedRef = React.useCallback((element: any) => {\n      if (themeRef.current !== element) {\n        themeRef.current = element\n      }\n      if (typeof ref === 'function') {\n        ref(element)\n      } else if (ref) {\n        ref.current = element\n      }\n    }, [ref, themeRef])\n\n    return (\n      <Component\n        {...props}\n        ref={combinedRef}\n        className={`${(props as any).className || ''} ${themeClasses}`.trim()}\n      />\n    )\n  })\n}