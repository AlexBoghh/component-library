'use client'

import * as React from 'react'

/**\n * Component Registry System\n * \n * Provides a centralized system for registering, discovering, and communicating\n * between components across the application. This enables loose coupling while\n * maintaining strong integration capabilities.\n */\n\ninterface ComponentInstance {\n  id: string\n  type: string\n  ref: React.RefObject<any>\n  props: Record<string, any>\n  methods: Record<string, (...args: any[]) => any>\n}\n\ninterface ComponentRegistryContextValue {\n  register: (component: ComponentInstance) => void\n  unregister: (id: string) => void\n  getComponent: (id: string) => ComponentInstance | undefined\n  getComponentsByType: (type: string) => ComponentInstance[]\n  getAllComponents: () => ComponentInstance[]\n  emit: (event: string, data: any) => void\n  on: (event: string, handler: (data: any) => void) => () => void\n}\n\nconst ComponentRegistryContext = React.createContext<ComponentRegistryContextValue | undefined>(undefined)\n\n/**\n * Component Registry Provider\n * \n * Manages component instances and enables inter-component communication.\n */\nexport function ComponentRegistryProvider({ children }: { children: React.ReactNode }) {\n  const [components, setComponents] = React.useState<Map<string, ComponentInstance>>(new Map())\n  const eventListeners = React.useRef<Map<string, Set<(data: any) => void>>>(new Map())\n\n  const register = React.useCallback((component: ComponentInstance) => {\n    setComponents(prev => {\n      const next = new Map(prev)\n      next.set(component.id, component)\n      return next\n    })\n  }, [])\n\n  const unregister = React.useCallback((id: string) => {\n    setComponents(prev => {\n      const next = new Map(prev)\n      next.delete(id)\n      return next\n    })\n  }, [])\n\n  const getComponent = React.useCallback((id: string) => {\n    return components.get(id)\n  }, [components])\n\n  const getComponentsByType = React.useCallback((type: string) => {\n    return Array.from(components.values()).filter(comp => comp.type === type)\n  }, [components])\n\n  const getAllComponents = React.useCallback(() => {\n    return Array.from(components.values())\n  }, [components])\n\n  const emit = React.useCallback((event: string, data: any) => {\n    const listeners = eventListeners.current.get(event)\n    if (listeners) {\n      listeners.forEach(handler => handler(data))\n    }\n  }, [])\n\n  const on = React.useCallback((event: string, handler: (data: any) => void) => {\n    if (!eventListeners.current.has(event)) {\n      eventListeners.current.set(event, new Set())\n    }\n    \n    const listeners = eventListeners.current.get(event)!\n    listeners.add(handler)\n\n    return () => {\n      listeners.delete(handler)\n      if (listeners.size === 0) {\n        eventListeners.current.delete(event)\n      }\n    }\n  }, [])\n\n  const value = React.useMemo(() => ({\n    register,\n    unregister,\n    getComponent,\n    getComponentsByType,\n    getAllComponents,\n    emit,\n    on\n  }), [register, unregister, getComponent, getComponentsByType, getAllComponents, emit, on])\n\n  return (\n    <ComponentRegistryContext.Provider value={value}>\n      {children}\n    </ComponentRegistryContext.Provider>\n  )\n}\n\n/**\n * Hook to access the component registry\n */\nexport function useComponentRegistry() {\n  const context = React.useContext(ComponentRegistryContext)\n  if (!context) {\n    throw new Error('useComponentRegistry must be used within a ComponentRegistryProvider')\n  }\n  return context\n}\n\n/**\n * Hook for components to register themselves\n */\nexport function useComponentRegistration(\n  id: string,\n  type: string,\n  props: Record<string, any> = {},\n  methods: Record<string, (...args: any[]) => any> = {}\n) {\n  const { register, unregister } = useComponentRegistry()\n  const ref = React.useRef<any>(null)\n\n  React.useEffect(() => {\n    const componentInstance: ComponentInstance = {\n      id,\n      type,\n      ref,\n      props,\n      methods\n    }\n\n    register(componentInstance)\n\n    return () => {\n      unregister(id)\n    }\n  }, [id, type, register, unregister])\n\n  return ref\n}\n\n/**\n * Hook for inter-component communication\n */\nexport function useComponentCommunication(componentId?: string) {\n  const { emit, on, getComponent, getComponentsByType } = useComponentRegistry()\n\n  const sendMessage = React.useCallback((targetId: string, message: any) => {\n    emit(`component:${targetId}:message`, {\n      from: componentId,\n      data: message\n    })\n  }, [emit, componentId])\n\n  const broadcastMessage = React.useCallback((message: any) => {\n    emit('component:broadcast', {\n      from: componentId,\n      data: message\n    })\n  }, [emit, componentId])\n\n  const listenToMessages = React.useCallback((handler: (message: any) => void) => {\n    if (!componentId) return () => {}\n    \n    return on(`component:${componentId}:message`, handler)\n  }, [on, componentId])\n\n  const listenToBroadcasts = React.useCallback((handler: (message: any) => void) => {\n    return on('component:broadcast', handler)\n  }, [on])\n\n  return {\n    sendMessage,\n    broadcastMessage,\n    listenToMessages,\n    listenToBroadcasts,\n    getComponent,\n    getComponentsByType\n  }\n}