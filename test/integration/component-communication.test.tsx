/**\n * Component Communication Tests\n * \n * Tests the component registry and communication system to ensure\n * components can communicate seamlessly.\n */\n\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react'\nimport { ApplicationProviders } from '@/app/providers'\nimport { \n  useComponentRegistry, \n  useComponentRegistration, \n  useComponentCommunication \n} from '@/lib/integration/component-registry'\nimport { useState } from 'react'\n\n// Test components for communication\nfunction SenderComponent() {\n  const ref = useComponentRegistration('sender', 'test-sender')\n  const { sendMessage, broadcastMessage } = useComponentCommunication('sender')\n  const [message, setMessage] = useState('')\n\n  return (\n    <div ref={ref} data-testid=\"sender-component\">\n      <input \n        data-testid=\"message-input\"\n        value={message}\n        onChange={(e) => setMessage(e.target.value)}\n        placeholder=\"Enter message\"\n      />\n      <button \n        data-testid=\"send-direct\"\n        onClick={() => sendMessage('receiver', message)}\n      >\n        Send Direct\n      </button>\n      <button \n        data-testid=\"broadcast\"\n        onClick={() => broadcastMessage(message)}\n      >\n        Broadcast\n      </button>\n    </div>\n  )\n}\n\nfunction ReceiverComponent() {\n  const ref = useComponentRegistration('receiver', 'test-receiver')\n  const { listenToMessages, listenToBroadcasts } = useComponentCommunication('receiver')\n  const [receivedMessage, setReceivedMessage] = useState('')\n  const [broadcastMessage, setBroadcastMessage] = useState('')\n\n  React.useEffect(() => {\n    const unsubscribeMessages = listenToMessages((message) => {\n      setReceivedMessage(message.data)\n    })\n\n    const unsubscribeBroadcasts = listenToBroadcasts((message) => {\n      setBroadcastMessage(message.data)\n    })\n\n    return () => {\n      unsubscribeMessages()\n      unsubscribeBroadcasts()\n    }\n  }, [listenToMessages, listenToBroadcasts])\n\n  return (\n    <div ref={ref} data-testid=\"receiver-component\">\n      <div data-testid=\"received-message\">{receivedMessage}</div>\n      <div data-testid=\"broadcast-message\">{broadcastMessage}</div>\n    </div>\n  )\n}\n\nfunction RegistryInspectorComponent() {\n  const { getAllComponents, getComponentsByType } = useComponentRegistry()\n  const [componentCount, setComponentCount] = useState(0)\n  const [testComponents, setTestComponents] = useState(0)\n\n  React.useEffect(() => {\n    const interval = setInterval(() => {\n      const allComponents = getAllComponents()\n      const testComps = getComponentsByType('test-sender').concat(getComponentsByType('test-receiver'))\n      \n      setComponentCount(allComponents.length)\n      setTestComponents(testComps.length)\n    }, 100)\n\n    return () => clearInterval(interval)\n  }, [getAllComponents, getComponentsByType])\n\n  return (\n    <div data-testid=\"registry-inspector\">\n      <div data-testid=\"total-components\">{componentCount}</div>\n      <div data-testid=\"test-components\">{testComponents}</div>\n    </div>\n  )\n}\n\ndescribe('Component Communication', () => {\n  it('should register components in the registry', async () => {\n    render(\n      <ApplicationProviders>\n        <SenderComponent />\n        <ReceiverComponent />\n        <RegistryInspectorComponent />\n      </ApplicationProviders>\n    )\n\n    await waitFor(() => {\n      expect(screen.getByTestId('test-components')).toHaveTextContent('2')\n    })\n  })\n\n  it('should send direct messages between components', async () => {\n    render(\n      <ApplicationProviders>\n        <SenderComponent />\n        <ReceiverComponent />\n      </ApplicationProviders>\n    )\n\n    const messageInput = screen.getByTestId('message-input')\n    const sendButton = screen.getByTestId('send-direct')\n    const receivedMessage = screen.getByTestId('received-message')\n\n    // Type message\n    fireEvent.change(messageInput, { target: { value: 'Hello, Receiver!' } })\n    \n    // Send message\n    fireEvent.click(sendButton)\n\n    // Check if message was received\n    await waitFor(() => {\n      expect(receivedMessage).toHaveTextContent('Hello, Receiver!')\n    })\n  })\n\n  it('should broadcast messages to all listening components', async () => {\n    render(\n      <ApplicationProviders>\n        <SenderComponent />\n        <ReceiverComponent />\n      </ApplicationProviders>\n    )\n\n    const messageInput = screen.getByTestId('message-input')\n    const broadcastButton = screen.getByTestId('broadcast')\n    const broadcastMessage = screen.getByTestId('broadcast-message')\n\n    // Type message\n    fireEvent.change(messageInput, { target: { value: 'Broadcast Message!' } })\n    \n    // Broadcast message\n    fireEvent.click(broadcastButton)\n\n    // Check if broadcast was received\n    await waitFor(() => {\n      expect(broadcastMessage).toHaveTextContent('Broadcast Message!')\n    })\n  })\n\n  it('should clean up components when unmounted', async () => {\n    const { unmount } = render(\n      <ApplicationProviders>\n        <SenderComponent />\n        <ReceiverComponent />\n        <RegistryInspectorComponent />\n      </ApplicationProviders>\n    )\n\n    // Wait for components to register\n    await waitFor(() => {\n      expect(screen.getByTestId('test-components')).toHaveTextContent('2')\n    })\n\n    // Unmount components\n    unmount()\n\n    // Re-render with just the inspector\n    render(\n      <ApplicationProviders>\n        <RegistryInspectorComponent />\n      </ApplicationProviders>\n    )\n\n    // Should show 0 test components\n    await waitFor(() => {\n      expect(screen.getByTestId('test-components')).toHaveTextContent('0')\n    })\n  })\n\n  it('should handle multiple message types', async () => {\n    function MultiMessageReceiver() {\n      const ref = useComponentRegistration('multi-receiver', 'multi-receiver')\n      const { listenToMessages } = useComponentCommunication('multi-receiver')\n      const [messages, setMessages] = useState<string[]>([])\n\n      React.useEffect(() => {\n        return listenToMessages((message) => {\n          setMessages(prev => [...prev, `${message.from}: ${message.data}`])\n        })\n      }, [listenToMessages])\n\n      return (\n        <div ref={ref} data-testid=\"multi-receiver\">\n          {messages.map((msg, index) => (\n            <div key={index} data-testid={`message-${index}`}>{msg}</div>\n          ))}\n        </div>\n      )\n    }\n\n    function MultiMessageSender({ id }: { id: string }) {\n      const ref = useComponentRegistration(id, 'multi-sender')\n      const { sendMessage } = useComponentCommunication(id)\n\n      return (\n        <div ref={ref}>\n          <button \n            data-testid={`send-from-${id}`}\n            onClick={() => sendMessage('multi-receiver', `Message from ${id}`)}\n          >\n            Send from {id}\n          </button>\n        </div>\n      )\n    }\n\n    render(\n      <ApplicationProviders>\n        <MultiMessageSender id=\"sender1\" />\n        <MultiMessageSender id=\"sender2\" />\n        <MultiMessageReceiver />\n      </ApplicationProviders>\n    )\n\n    // Send messages from both senders\n    fireEvent.click(screen.getByTestId('send-from-sender1'))\n    fireEvent.click(screen.getByTestId('send-from-sender2'))\n\n    // Check both messages received\n    await waitFor(() => {\n      expect(screen.getByTestId('message-0')).toHaveTextContent('sender1: Message from sender1')\n      expect(screen.getByTestId('message-1')).toHaveTextContent('sender2: Message from sender2')\n    })\n  })\n})"