/**\n * Provider Integration Tests\n * \n * Tests the integration between all providers to ensure they work together\n * without conflicts and provide the expected functionality.\n */\n\nimport { render, screen, waitFor } from '@testing-library/react'\nimport { ApplicationProviders } from '@/app/providers'\nimport { useTheme } from '@/lib/hooks/use-theme'\nimport { useComponentRegistry } from '@/lib/integration/component-registry'\nimport { useThemeIntegration } from '@/lib/integration/theme-integration'\nimport { useConfiguration } from '@/lib/config/use-configuration'\n\n// Test component that uses multiple providers\nfunction TestComponent() {\n  const { theme, themeId, mode } = useTheme()\n  const { register } = useComponentRegistry()\n  const { currentTheme, currentMode } = useThemeIntegration()\n  const { config } = useConfiguration()\n\n  return (\n    <div data-testid=\"test-component\">\n      <div data-testid=\"theme-id\">{themeId}</div>\n      <div data-testid=\"theme-mode\">{mode}</div>\n      <div data-testid=\"current-theme\">{currentTheme}</div>\n      <div data-testid=\"current-mode\">{currentMode}</div>\n      <div data-testid=\"config-theme\">{config.theme.defaultTheme}</div>\n    </div>\n  )\n}\n\ndescribe('Provider Integration', () => {\n  it('should provide all context values without conflicts', async () => {\n    render(\n      <ApplicationProviders>\n        <TestComponent />\n      </ApplicationProviders>\n    )\n\n    await waitFor(() => {\n      expect(screen.getByTestId('test-component')).toBeInTheDocument()\n    })\n\n    // Theme provider integration\n    expect(screen.getByTestId('theme-id')).toHaveTextContent('default')\n    expect(screen.getByTestId('theme-mode')).toHaveTextContent('dark')\n    \n    // Theme integration provider\n    expect(screen.getByTestId('current-theme')).toHaveTextContent('default')\n    expect(screen.getByTestId('current-mode')).toHaveTextContent('dark')\n    \n    // Configuration provider\n    expect(screen.getByTestId('config-theme')).toHaveTextContent('default')\n  })\n\n  it('should not cause provider conflicts or infinite renders', async () => {\n    const renderSpy = jest.fn()\n    \n    function SpyComponent() {\n      renderSpy()\n      return <div data-testid=\"spy-component\">Rendered</div>\n    }\n\n    render(\n      <ApplicationProviders>\n        <SpyComponent />\n      </ApplicationProviders>\n    )\n\n    await waitFor(() => {\n      expect(screen.getByTestId('spy-component')).toBeInTheDocument()\n    })\n\n    // Should render a reasonable number of times (not infinite)\n    expect(renderSpy).toHaveBeenCalledTimes(1)\n  })\n\n  it('should maintain provider hierarchy and context access', () => {\n    function NestedTestComponent() {\n      const theme = useTheme()\n      const registry = useComponentRegistry()\n      const themeIntegration = useThemeIntegration()\n      const config = useConfiguration()\n\n      return (\n        <div data-testid=\"nested-component\">\n          {theme && <div data-testid=\"has-theme\">theme</div>}\n          {registry && <div data-testid=\"has-registry\">registry</div>}\n          {themeIntegration && <div data-testid=\"has-theme-integration\">integration</div>}\n          {config && <div data-testid=\"has-config\">config</div>}\n        </div>\n      )\n    }\n\n    render(\n      <ApplicationProviders>\n        <NestedTestComponent />\n      </ApplicationProviders>\n    )\n\n    expect(screen.getByTestId('has-theme')).toBeInTheDocument()\n    expect(screen.getByTestId('has-registry')).toBeInTheDocument()\n    expect(screen.getByTestId('has-theme-integration')).toBeInTheDocument()\n    expect(screen.getByTestId('has-config')).toBeInTheDocument()\n  })\n\n  it('should handle provider updates without breaking other providers', async () => {\n    function UpdatingComponent() {\n      const { setTheme } = useTheme()\n      const { updateConfig } = useConfiguration()\n\n      return (\n        <div>\n          <button \n            data-testid=\"update-theme\"\n            onClick={() => setTheme('cyberpunk')}\n          >\n            Update Theme\n          </button>\n          <button \n            data-testid=\"update-config\"\n            onClick={() => updateConfig({ theme: { defaultTheme: 'minimal' } })}\n          >\n            Update Config\n          </button>\n        </div>\n      )\n    }\n\n    render(\n      <ApplicationProviders>\n        <UpdatingComponent />\n        <TestComponent />\n      </ApplicationProviders>\n    )\n\n    // Initial state\n    expect(screen.getByTestId('theme-id')).toHaveTextContent('default')\n    \n    // Update theme\n    screen.getByTestId('update-theme').click()\n    \n    await waitFor(() => {\n      expect(screen.getByTestId('theme-id')).toHaveTextContent('cyberpunk')\n    })\n\n    // Update config\n    screen.getByTestId('update-config').click()\n    \n    await waitFor(() => {\n      expect(screen.getByTestId('config-theme')).toHaveTextContent('minimal')\n    })\n  })\n})"