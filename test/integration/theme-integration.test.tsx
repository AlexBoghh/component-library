/**\n * Theme Integration Tests\n * \n * Tests the integration between theme system and components to ensure\n * consistent theme application and switching.\n */\n\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react'\nimport { ApplicationProviders } from '@/app/providers'\nimport { useTheme } from '@/lib/hooks/use-theme'\nimport { useThemeIntegration, useThemeAware } from '@/lib/integration/theme-integration'\nimport { Button } from '@/components/ui/primitives/button'\n\n// Test component that integrates with theme system\nfunction ThemeIntegratedComponent() {\n  const { themeId, mode, setTheme, toggleMode } = useTheme()\n  const { getThemeClasses, getThemeVariables } = useThemeIntegration()\n  const { ref, themeClasses } = useThemeAware()\n\n  return (\n    <div ref={ref} data-testid=\"theme-integrated\">\n      <div data-testid=\"current-theme\">{themeId}</div>\n      <div data-testid=\"current-mode\">{mode}</div>\n      <div data-testid=\"theme-classes\">{themeClasses.join(' ')}</div>\n      \n      <button \n        data-testid=\"switch-to-cyberpunk\"\n        onClick={() => setTheme('cyberpunk')}\n      >\n        Switch to Cyberpunk\n      </button>\n      \n      <button \n        data-testid=\"toggle-mode\"\n        onClick={toggleMode}\n      >\n        Toggle Mode\n      </button>\n      \n      <Button data-testid=\"themed-button\">Themed Button</Button>\n    </div>\n  )\n}\n\ndescribe('Theme Integration', () => {\n  beforeEach(() => {\n    // Clear localStorage before each test\n    localStorage.clear()\n  })\n\n  it('should apply theme classes and variables correctly', async () => {\n    render(\n      <ApplicationProviders>\n        <ThemeIntegratedComponent />\n      </ApplicationProviders>\n    )\n\n    const component = screen.getByTestId('theme-integrated')\n    \n    await waitFor(() => {\n      expect(component).toHaveClass('dark')\n      expect(component).toHaveClass('default-theme')\n    })\n  })\n\n  it('should update theme classes when theme changes', async () => {\n    render(\n      <ApplicationProviders>\n        <ThemeIntegratedComponent />\n      </ApplicationProviders>\n    )\n\n    const component = screen.getByTestId('theme-integrated')\n    const switchButton = screen.getByTestId('switch-to-cyberpunk')\n    \n    // Initial state\n    await waitFor(() => {\n      expect(screen.getByTestId('current-theme')).toHaveTextContent('default')\n    })\n\n    // Switch theme\n    fireEvent.click(switchButton)\n    \n    await waitFor(() => {\n      expect(screen.getByTestId('current-theme')).toHaveTextContent('cyberpunk')\n      expect(component).toHaveClass('cyberpunk-theme')\n      expect(component).toHaveClass('theme-neon')\n      expect(component).toHaveClass('theme-glitch')\n    })\n  })\n\n  it('should toggle between light and dark modes', async () => {\n    render(\n      <ApplicationProviders>\n        <ThemeIntegratedComponent />\n      </ApplicationProviders>\n    )\n\n    const component = screen.getByTestId('theme-integrated')\n    const toggleButton = screen.getByTestId('toggle-mode')\n    \n    // Initial dark mode\n    await waitFor(() => {\n      expect(screen.getByTestId('current-mode')).toHaveTextContent('dark')\n      expect(component).toHaveClass('dark')\n    })\n\n    // Toggle to light mode\n    fireEvent.click(toggleButton)\n    \n    await waitFor(() => {\n      expect(screen.getByTestId('current-mode')).toHaveTextContent('light')\n      expect(component).toHaveClass('light')\n      expect(component).not.toHaveClass('dark')\n    })\n\n    // Toggle back to dark mode\n    fireEvent.click(toggleButton)\n    \n    await waitFor(() => {\n      expect(screen.getByTestId('current-mode')).toHaveTextContent('dark')\n      expect(component).toHaveClass('dark')\n      expect(component).not.toHaveClass('light')\n    })\n  })\n\n  it('should provide theme-aware CSS variables', async () => {\n    render(\n      <ApplicationProviders>\n        <ThemeIntegratedComponent />\n      </ApplicationProviders>\n    )\n\n    const component = screen.getByTestId('theme-integrated')\n    \n    await waitFor(() => {\n      const styles = getComputedStyle(component)\n      \n      // Check for CSS variables presence (values will depend on theme)\n      expect(styles.getPropertyValue('--background')).toBeTruthy()\n      expect(styles.getPropertyValue('--foreground')).toBeTruthy()\n      expect(styles.getPropertyValue('--primary')).toBeTruthy()\n    })\n  })\n\n  it('should handle theme transitions smoothly', async () => {\n    render(\n      <ApplicationProviders>\n        <ThemeIntegratedComponent />\n      </ApplicationProviders>\n    )\n\n    const switchButton = screen.getByTestId('switch-to-cyberpunk')\n    const component = screen.getByTestId('theme-integrated')\n    \n    // Switch theme\n    fireEvent.click(switchButton)\n    \n    // Should have transitioning class temporarily\n    await waitFor(() => {\n      expect(component).toHaveClass('theme-transitioning')\n    })\n\n    // Should remove transitioning class after animation\n    await waitFor(() => {\n      expect(component).not.toHaveClass('theme-transitioning')\n    }, { timeout: 1000 })\n  })\n\n  it('should persist theme changes across re-renders', async () => {\n    const { rerender } = render(\n      <ApplicationProviders>\n        <ThemeIntegratedComponent />\n      </ApplicationProviders>\n    )\n\n    const switchButton = screen.getByTestId('switch-to-cyberpunk')\n    \n    // Switch theme\n    fireEvent.click(switchButton)\n    \n    await waitFor(() => {\n      expect(screen.getByTestId('current-theme')).toHaveTextContent('cyberpunk')\n    })\n\n    // Re-render component\n    rerender(\n      <ApplicationProviders>\n        <ThemeIntegratedComponent />\n      </ApplicationProviders>\n    )\n\n    // Theme should persist\n    await waitFor(() => {\n      expect(screen.getByTestId('current-theme')).toHaveTextContent('cyberpunk')\n    })\n  })\n\n  it('should integrate with existing components', async () => {\n    render(\n      <ApplicationProviders>\n        <ThemeIntegratedComponent />\n      </ApplicationProviders>\n    )\n\n    const themedButton = screen.getByTestId('themed-button')\n    \n    await waitFor(() => {\n      // Button should be rendered and themed\n      expect(themedButton).toBeInTheDocument()\n      expect(themedButton).toHaveClass('inline-flex') // Button classes\n    })\n  })\n})"